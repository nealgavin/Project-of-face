#include "cv.h"
#include "highgui.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <math.h>
#include <float.h>
#include <limits.h>
#include <time.h>
#include <ctype.h>

#include <winsock.h>
#include <iostream>
#include <string>
#include <mysql.h>
#include <windows.h>

#ifdef _EiC
#define WIN32
#endif
using namespace std;

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "libmysql.lib")

static CvMemStorage* storage = 0;
static CvHaarClassifierCascade* cascade = 0;
const int path_len = 555;
const int con_width = 48;
const int con_height = 48;
char path_name[55],Save_File_Name[55],ID_Student[55]="F:\\project\\code\\training\\Rsize_Pic\\data\\Computer";
char path_STU[65]="F:\\project\\code\\training\\Rsize_Pic\\data\\Computer";
char con_save[555] = "F:\\project\\code\\training\\Rsize_Pic\\sam\\";
const char* cascade_name =
    "haarcascade_frontalface_alt.xml";
int Sample_NUM = 20;
CvMat* Sample;   ///样本
CvMat* Unkonw;  ///待识别人脸矩阵
CvMat* avg;
CvMat* eigenvectors;
CvMat* result;

MYSQL mydata;

void detect_and_draw( IplImage* image );
void data_in_mysql();//采集数据写入数据库
void Mysql_link();//连接数据库
bool SQL_query(string data_query)
{
  /***
    string sss,ttt;
    cerr<<"Enter the sql code! while enter the '#' to end"<<endl;
    ttt = "";
    while(cin>>sss)
    {
        if(sss == "#")
        break;
        ttt += " ";
        ttt += sss;
    }
    
    if(mysql_query(&mydata,ttt.c_str()) == 0)
    {
        cerr<<"query success!"<<endl;
        return 1;
    }
    else
    {
        cerr<<"query failed!"<<endl;
        return 0;
    }
    ***/
    if(mysql_query(&mydata,data_query.c_str()) == 0)
    {
        cerr<<"query success!"<<endl;
        return 1;
    }
    else 
    {
        cerr<<"query failed!"<<endl;
        return 0;
    }
}
void SQL_query_and_show(string data_query)
{
    MYSQL_RES* result = NULL;
    if(!SQL_query(data_query))
       return;
     result = mysql_store_result(&mydata);
     int row_num = mysql_num_rows(result);
     cerr<<"row count"<<row_num<<endl;
     unsigned int field_num = mysql_num_fields(result);
     MYSQL_FIELD* field = NULL;
     for(unsigned int i=0;i<field_num;++i)
     {
         field = mysql_fetch_field_direct(result,i);
         cerr<<field->name<<"\t\t";
     }
     //打印各行
     MYSQL_ROW row = NULL;
     row = mysql_fetch_row(result);
     while(row != NULL)
     {
         for(int i=0;i<field_num;++i)
         {
             cout<<row[i]<<"\t\t";
         }
         cout<<endl;
         row = mysql_fetch_row(result);
     }
     mysql_free_result(result);
}
void Mysql_link()
{
    //MYSQL mydata;
    //初始化数据库
    if(0==mysql_library_init(0,NULL,NULL))
         {
          cout<<"mysql_library_init() succeed"<<endl;
         }
         else
         {
          cout<<"mysql_library_init() failed"<<endl;
         }

    #ifdef STEPBYSTEP
         system("pause");
        #endif

         //初始化数据结构
         if(NULL!=mysql_init(&mydata))
         {
          cout<<"mysql_init() succeed"<<endl;
         }
         else
         {
          cout<<"mysql_init() failed"<<endl;
         }

          //在连接数据库之前，设置额外的连接选项
         //可以设置的选项很多，这里设置字符集，否则无法处理中文
         if(0==mysql_options(&mydata,MYSQL_SET_CHARSET_NAME,"gbk"))
         {
          cout<<"mysql_options() succeed"<<endl;
         }
         else
         {
          cout<<"mysql_options() failed"<<endl;
         }

      #ifdef STEPBYSTEP
       system("pause");
      #endif

       if(!mysql_real_connect(&mydata,"localhost","root","dream","face_match",3306,NULL,0))
              printf("\nc++ link mysql fail\n");
       else
              printf("\nc++ link mysql success!\n");

      #ifdef STEPBYSTEP
       system("pause");
      #endif
}
void SQL_DATA()
{
    
      while(1)
      {
          cerr<<"choose:1:query 2:query and show 3:exit"<<endl;
          int choose;
          cin>>choose;
          char data_query[555];
          if(choose == 1)
          {
              cin.getline(data_query,258,'#');
              SQL_query(data_query);
          }
          else if(choose == 2)
          {
			  cin.getline(data_query,258,'#');
                //cin>>data_query;
              SQL_query_and_show(data_query);
          }
          else if(choose == 3)
          {
              break;
          }
      }
      
 mysql_close(&mydata);
 mysql_server_end();
}
void data_in_mysql(string stu_id,string index,string path_save)
{
   string data_query="";
   data_query = "insert into img_table(img_name,stu_id) values (";
  // data_query += index;
   data_query += "'";
   data_query += path_save;
   data_query += "',";
   data_query += stu_id;
   data_query += ")";
   cerr<<"query:"<<endl;
   cerr<<data_query<<endl;
   SQL_query(data_query);
}
void ShowImg(IplImage*img)
{
   puts("AAAAAAAAAAAAAAAAAAAAAAAAAAA");
   cvNamedWindow("showpic",CV_WINDOW_AUTOSIZE);
   cvShowImage("showpic",img);
   cvWaitKey(500);
   cvDestroyWindow("showpic");
   puts("BBBBBBBBBBBBBBBBBBBBBBBBBBB");
}
void detect_and_draw( IplImage* img ,int in_or_check)
{
    static CvScalar colors[] =
    {
        {{0,0,255}},
        {{0,128,255}},
        {{0,255,255}},
        {{0,255,0}},
        {{255,128,0}},
        {{255,255,0}},
        {{255,0,0}},
        {{255,0,255}}
    };

	IplImage* img1,*dst,*con_dst;
	CvSize size;//IplImage* detectFace;
	CvMat* map1,*map2;
	CvRect* r1;
	CvRect rect;
    double scale = 1.3;
    IplImage* gray = cvCreateImage( cvSize(img->width,img->height), 8, 1 );
    IplImage* small_img = cvCreateImage( cvSize( cvRound (img->width/scale),
                         cvRound (img->height/scale)),
                     8, 1 );
    int i;
    cvCvtColor( img, gray, CV_BGR2GRAY );
    cvResize( gray, small_img, CV_INTER_LINEAR );
    cvEqualizeHist( small_img, small_img );
    cvClearMemStorage( storage );
   ///gavin add
    con_dst = cvCreateImage(cvSize(con_width,con_height),8,3);///very importance
//    ShowImg(img);
    printf("Please enter the path of save img!\n");
        //char Img_Save[path_len];
        //scanf("%s",Img_Save);
        string path_save,path_copy;
        cin>>path_copy;
    if( cascade )
    {
        double t = (double)cvGetTickCount();
        CvSeq* faces = cvHaarDetectObjects( small_img, cascade, storage,
                                            1.1, 2, 0/*CV_HAAR_DO_CANNY_PRUNING*/,
                                            cvSize(30, 30) );
        t = (double)cvGetTickCount() - t;
        printf( "detection time = %gms\n", t/((double)cvGetTickFrequency()*1000.) );
//        ShowImg(img);
		Sample_NUM = 0;
        for( i = 0; i < (faces ? faces->total : 0); i++ )
        {
			++Sample_NUM;
            CvRect* r = (CvRect*)cvGetSeqElem( faces, i );
            CvPoint pt1,pt2;
            int radius;
            pt1.x = cvRound((r->x)*scale);
            pt1.y = cvRound((r->y)*scale);
            pt2.x = cvRound((r->x + r->width)*scale);
            pt2.y = cvRound((r->y + r->height)*scale);
//            printf("pt1 %d %d  pt2 %d %d\n",pt1.x,pt1.y,pt2.x,pt2.y);
            rect.x = min(pt1.x,pt2.x);
            rect.y = min(pt1.y,pt2.y);
            rect.width = abs(pt1.x-pt2.x);
            rect.height = abs(pt1.y-pt2.y);
//            printf(" cvrect = %d %d wh %d %d\n",rect.x,rect.y,rect.width,rect.height);
            dst = cvCreateImage(cvSize(rect.width,rect.height),8,3);///very importance
//            cvNamedWindow("img",CV_WINDOW_AUTOSIZE);
//            cvNamedWindow("dst",CV_WINDOW_AUTOSIZE);
            if(in_or_check == 1)
            {
                ShowImg(dst);
            }
            cvSetImageROI(img,rect);
            cvCopy(img,dst);
            cvResetImageROI(img);///重置ROI
            cvResize(dst,con_dst, CV_INTER_LINEAR);
           /***
           新增的功能 2014，2，26
           引入数据库，in_or_check = 1 是数据输入
           in_or_check = 2 是匹配 
           ***/
			path_save = path_copy;
           if(in_or_check == 1)
           {
               cerr<<"confirm the input: 1:yes  2:no"<<endl;
               int OK_in;
               cin>>OK_in;
               
               if(OK_in == 1)
               {
                    cerr<<"enter the stu_id of student and ID of img"<<endl;
                    string stu_id,index;
                    cin>>stu_id>>index;
                    path_save += index;
                    path_save += ".jpg";
                    data_in_mysql(stu_id,index,path_save);///less a fucntion
               }
           }
		   else if(in_or_check == 2)
		   {
			   char ts[22];
			    itoa(i,ts,10);
				path_save += ts;
				path_save += ".jpg";
				string to_save = "insert into path_pic values('";
					to_save += path_save;
					to_save += "')";
				cerr<<to_save<<endl;
				SQL_query(to_save);
		   }
			cerr<<path_save<<endl;
            //get_File_Name(Save_File_Name,Img_Save,i+1);
            //printf("%s\n",Save_File_Name);
            cvSaveImage(path_save.c_str(),con_dst);
//            ShowImg(con_dst);
//            cvShowImage("img",img);
//            cvShowImage("dst",dst);
//            cvWaitKey(0);
//            cvDestroyWindow("img");
//            cvDestroyWindow("dst");
            radius = cvRound((r->width + r->height)*0.25*scale);
 //           cvRectangle( img, pt1, pt2, colors[i%2], 2, 8, 0 );
        }
    }
    cvShowImage( "result", img );
    cvReleaseImage( &gray );
    cvReleaseImage( &small_img );
}
CvMat* Load_Image_And_Training(int Training_Num,const char*Img_Path,bool sam)
{
  IplImage* dst=0;
  char name[55],ID[20];
  CvMat Row_Header,*Row,*Train_Mat;

  Train_Mat = cvCreateMat(Training_Num,con_width*con_height,CV_32FC1);
  for(int i=0;i<Training_Num;++i)
  {
    strcpy(name,Img_Path);
    if(sam)
    {
      itoa(i+1,ID,10); ///turn to 10 char
      strcat(name,ID);
      strcat(name,".jpg");
    }
    else
    {
//      itoa(5,ID,10); ///turn to 10 char
//      strcat(name,ID);
//      strcat(name,".jpg");
    }
    printf("ooo___%s\n",name);
    dst = cvLoadImage(name,0);  ///重要，0单通道载入
    CvMat* mat = cvCreateMat(dst->height,dst->width,CV_32FC1);
//    ShowImg(dst);
    cvConvert(dst,mat);///turn picture to Mat
    Row = cvReshape(mat,&Row_Header,0,1); ///转成一列

    float* ptr=(float*)(Train_Mat->data.fl+i*Train_Mat->step/4);
    float* _ptr=(float*)Row->data.fl;

    for(int j=0;j<Train_Mat->cols;++j) ///将图片存入训练矩阵
    {
      *ptr = *_ptr;
      ++ptr;
      ++_ptr;
    }
  }
  return Train_Mat;
}
void MatchWhoPCA(char*path_who)///can add path or number
{
  //  printf("enter the path of Who match!\n");
 //   char path_who[path_len];
  //  scanf("%s",path_who);
    CvMat* Unkonw = Load_Image_And_Training(1,path_who/*ID_Student*/,0);
    CvMat* result2 = cvCreateMat(Unkonw->rows,min(Sample->rows,Sample->cols),CV_32FC1);
           cvProjectPCA( Unkonw,avg,eigenvectors,result2 );
    	float* dif = new float[result->rows];
      float* _dif = dif;
      float* t_free = dif;
      float* resptr1,*resptr2;
      float sum;
      for(int i=0;i<result->rows;++i)
      {
          sum = 0.0;
          resptr1=(float*)result->data.fl+i*result->step/4;
          resptr2=(float*)result2->data.fl;
          for(int j=0;j<result->cols;++j)
          {
            sum += (float)(*resptr1-*resptr2)*(*resptr1-*resptr2);
            resptr1++; resptr2++;
          }
        *dif = sum;
        printf("--%d %f\n",i+1,sum);
        dif++;
      }

      int dex=1;                           //样本命名是从1开始的
      float temp=*_dif;
      printf("besgin: %f\n",temp);
      for(int k=1;k<result->rows;k++)
      {
          _dif++;
          if(temp>*_dif)
          {
            printf("temp= %f _dif= %f\n",temp,*_dif);
            dex=k+1;            //样本命名是从1开始的
            temp=*_dif;
          }
      }
      printf("OK_OK_%d\n",dex);

      delete [] t_free;

}
void PickPCA(int Sample_Num,char*Path_of_Img)//
{
 // printf("enter the number of Sample!\n");
 // int Sample_Num;
 // scanf("%d",&Sample_Num);
 // printf("enter the path of Sameple!\n");
 // char Path_of_Img[path_len];
  //scanf("%s",Path_of_Img);
         Sample = Load_Image_And_Training(Sample_Num,Path_of_Img/*ID_Student*/,1);
//  CvMat* Unkonw = Load_Image_And_Training(1,ID_Student,0);
         avg = cvCreateMat(1,Sample->cols,CV_32FC1);
	CvMat* eigenvalues = cvCreateMat(1,min(Sample->rows,Sample->cols),CV_32FC1);
         eigenvectors = cvCreateMat(min(Sample->rows,Sample->cols),Sample->cols,CV_32FC1);
         result = cvCreateMat(Sample->rows,min(Sample->rows,Sample->cols),CV_32FC1);//主成分数目:min(Sample->rows,Sample->cols)
//	CvMat* result2 = cvCreateMat(Unkonw->rows,min(Sample->rows,Sample->cols),CV_32FC1);

	cvCalcPCA( Sample,avg,eigenvalues,eigenvectors,CV_PCA_DATA_AS_ROW );
	cvProjectPCA( Sample,avg,eigenvectors,result );
//	cvProjectPCA( Unkonw,avg,eigenvectors,result2 );

//	float* dif = new float[result->rows];
//	float* _dif = dif;
//	float* t_free = dif;
//	float* resptr1,*resptr2;
//	float sum;
//	for(int i=0;i<result->rows;++i)
//  {
//      sum = 0.0;
//      resptr1=(float*)result->data.fl+i*result->step/4;
//      resptr2=(float*)result2->data.fl;
//      for(int j=0;j<result->cols;++j)
//      {
//        sum += (float)(*resptr1-*resptr2)*(*resptr1-*resptr2);
//        resptr1++; resptr2++;
//      }
//    *dif = sum;
//    printf("--%d %f\n",i+1,sum);
//    dif++;
//  }
//
//  int dex=1;                           //样本命名是从1开始的
//	float temp=*_dif;
//	printf("besgin: %f\n",temp);
//	for(int k=1;k<result->rows;k++)
//	{
//			_dif++;
//			if(temp>*_dif)
//			{
//				printf("temp= %f _dif= %f\n",temp,*_dif);
//				dex=k+1;            //样本命名是从1开始的
//				temp=*_dif;
//			}
//	}
//	printf("OK_OK_%d\n",dex);
//
//	delete [] t_free;
}
void Draw()
{
  printf("Please enter the path of picture!\n");
  char path_name[path_len];
      scanf("%s",path_name);
      cascade_name = "haarcascade_frontalface_alt2.xml";
      cascade = (CvHaarClassifierCascade*)cvLoad( cascade_name, 0, 0, 0 );
      storage = cvCreateMemStorage(0);
//      cvNamedWindow( "result", 1 );
      IplImage* image = cvLoadImage( path_name, 1 );
      if( image )
        {
            /***
            功能新增 2014.2.26
            ***/
            cerr<<"enter the choose:1:data in,2:check"<<endl;
            int fun_choose;
            cin>>fun_choose;
            detect_and_draw( image,fun_choose );
            cvReleaseImage( &image );
        }
        else
        {
          printf("the wrong path!!!\n");
        }
//        cvDestroyWindow("result");
}
void Match()
{
//    printf("Load img from ku!\nenter the path:\n");
//    char Path_Img_Ku[path_len];
//    scanf("%s",Path_Img_Ku);
//    int Num_of_Img;
//    printf("enter the number of Picture\n");
//    scanf("%d",&Num_of_Img);
//    CvMat* tes = Load_Image_And_Training(/*5*/Num_of_Img,Path_Img_Ku/*ID_Student*/);
//    printf("Please enter the number of Sample!\n");
//    int Sample_num;
//    scanf("%d",&Sample_num);
	/****
	less sql get
	****/
    PickPCA(Sample_NUM,con_save);
    while(true)
    {
      printf("fuction:1.enter the path of who and match! 2.exit\n");
      int x;
      scanf("%d",&x);
      switch(x)
      {
      case 1:
		  /***
		  path of who
		  ***/
		  char ssss[222];
		  cin>>ssss;
        MatchWhoPCA(ssss); break;
      case 2:
        return;
      default:printf("error! Input again!\n");
      }
    }

}
void Funtion_Choose()
{
  Mysql_link();
  printf("Fuction:  1:draw 2:match 3:sql\n");
  int x;
  scanf("%d",&x);
  switch(x)
  {
  case 1: Draw();
    break;
  case 2: Match();
    break;
  case 3: SQL_DATA();
    break;
  default:
    printf("error\n");
  }
}
int main()
{
    Funtion_Choose();
    cvWaitKey(0);
//    while(~scanf("%s",path_name))
//    {
//      cascade_name = "haarcascade_frontalface_Load_Image_And_Trainingalt2.xml";
//      cascade = (CvHaarClassifierCascade*)cvLoad( cascade_name, 0, 0, 0 );
//      storage = cvCreateMemStorage(0);
//      cvNamedWindow( "result", 1 );
//      IplImage* image = cvLoadImage( path_name, 1 );
////      IplImage* test =cvLoadImage(ID_Student,1);
////      ShowImg(test);
//      if( image )
//        {
//            detect_and_draw( image );
////            cvWaitKey(0);
//            cvReleaseImage( &image );
//        }
//        cvDestroyWindow("result");
//    }
    return 0;
}
