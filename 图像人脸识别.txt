#include "cv.h"
#include "highgui.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <math.h>
#include <float.h>
#include <limits.h>
#include <time.h>
#include <ctype.h>

#ifdef _EiC
#define WIN32
#endif
static CvMemStorage* storage = 0;
static CvHaarClassifierCascade* cascade = 0;
const int con_width = 48;
const int con_height = 48;
char path_name[55],Save_File_Name[55],ID_Student[55]="F:\\project\\code\\training\\Rsize_Pic\\data\\Computer";
const char* cascade_name =
    "haarcascade_frontalface_alt.xml";
void detect_and_draw( IplImage* image );
void ShowImg(IplImage*img)
{
   puts("AAAAAAAAAAAAAAAAAAAAAAAAAAA");
   cvNamedWindow("showpic",CV_WINDOW_AUTOSIZE);
   cvShowImage("showpic",img);
   cvWaitKey(500);
   cvDestroyWindow("showpic");
   puts("BBBBBBBBBBBBBBBBBBBBBBBBBBB");
}
void get_File_Name(char*t,char*s,int id)
{
  char tid[55];
  int pos = 0;
  while(id)
  {
    tid[pos++]=id%10;
    id/=10;
  }
  int lens = strlen(s);
  for(int i=0;s[i];++i)
    t[i] = s[i];
  for(int j=pos-1;j>=0;--j)
    t[lens++]=tid[j]+'0';
    t[lens++]='.';
    t[lens++]='j';
    t[lens++]='p';
    t[lens++]='g';
  t[lens] = '\0';
}
void detect_and_draw( IplImage* img )
{
    static CvScalar colors[] =
    {
        {{0,0,255}},
        {{0,128,255}},
        {{0,255,255}},
        {{0,255,0}},
        {{255,128,0}},
        {{255,255,0}},
        {{255,0,0}},
        {{255,0,255}}
    };

	IplImage* img1,*dst,*con_dst;
	CvSize size;//IplImage* detectFace;
	CvMat* map1,*map2;
	CvRect* r1;
	CvRect rect;
    double scale = 1.3;
    IplImage* gray = cvCreateImage( cvSize(img->width,img->height), 8, 1 );
    IplImage* small_img = cvCreateImage( cvSize( cvRound (img->width/scale),
                         cvRound (img->height/scale)),
                     8, 1 );
    int i;
    cvCvtColor( img, gray, CV_BGR2GRAY );
    cvResize( gray, small_img, CV_INTER_LINEAR );
    cvEqualizeHist( small_img, small_img );
    cvClearMemStorage( storage );
   ///gavin add
    con_dst = cvCreateImage(cvSize(con_width,con_height),8,3);///very importance
//    ShowImg(img);
    if( cascade )
    {
        double t = (double)cvGetTickCount();
        CvSeq* faces = cvHaarDetectObjects( small_img, cascade, storage,
                                            1.1, 2, 0/*CV_HAAR_DO_CANNY_PRUNING*/,
                                            cvSize(30, 30) );
        t = (double)cvGetTickCount() - t;
        printf( "detection time = %gms\n", t/((double)cvGetTickFrequency()*1000.) );
//        ShowImg(img);
        for( i = 0; i < (faces ? faces->total : 0); i++ )
        {
            CvRect* r = (CvRect*)cvGetSeqElem( faces, i );
            CvPoint pt1,pt2;
            int radius;
            pt1.x = cvRound((r->x)*scale);
            pt1.y = cvRound((r->y)*scale);
            pt2.x = cvRound((r->x + r->width)*scale);
            pt2.y = cvRound((r->y + r->height)*scale);
//            printf("pt1 %d %d  pt2 %d %d\n",pt1.x,pt1.y,pt2.x,pt2.y);
            rect.x = min(pt1.x,pt2.x);
            rect.y = min(pt1.y,pt2.y);
            rect.width = abs(pt1.x-pt2.x);
            rect.height = abs(pt1.y-pt2.y);
//            printf(" cvrect = %d %d wh %d %d\n",rect.x,rect.y,rect.width,rect.height);
            dst = cvCreateImage(cvSize(rect.width,rect.height),8,3);///very importance
//            cvNamedWindow("img",CV_WINDOW_AUTOSIZE);
//            cvNamedWindow("dst",CV_WINDOW_AUTOSIZE);
            cvSetImageROI(img,rect);
            cvCopy(img,dst);
            cvResetImageROI(img);///重置ROI
            cvResize(dst,con_dst, CV_INTER_LINEAR);
            get_File_Name(Save_File_Name,ID_Student,i+1);
            printf("%s\n",Save_File_Name);
            cvSaveImage(Save_File_Name,con_dst);
//            ShowImg(con_dst);
//            cvShowImage("img",img);
//            cvShowImage("dst",dst);
//            cvWaitKey(0);
//            cvDestroyWindow("img");
//            cvDestroyWindow("dst");
            radius = cvRound((r->width + r->height)*0.25*scale);
 //           cvRectangle( img, pt1, pt2, colors[i%2], 2, 8, 0 );
        }
    }
    cvShowImage( "result", img );
    cvReleaseImage( &gray );
    cvReleaseImage( &small_img );
}
CvMat* Load_Image_And_Training(int Training_Num,const char*Img_Path,bool sam)
{
  IplImage* dst=0;
  char name[55],ID[20];
  CvMat Row_Header,*Row,*Train_Mat;

  Train_Mat = cvCreateMat(Training_Num,con_width*con_height,CV_32FC1);
  for(int i=0;i<Training_Num;++i)
  {
    strcpy(name,Img_Path);
    if(sam)
    {
      itoa(i+1,ID,10); ///turn to 10 char
      strcat(name,ID);
      strcat(name,".jpg");
    }
    else 
    {
      itoa(5,ID,10); ///turn to 10 char
      strcat(name,ID);
      strcat(name,".jpg");
    }
    printf("ooo___%s\n",name);
    dst = cvLoadImage(name,0);  ///重要，0单通道载入
    CvMat* mat = cvCreateMat(dst->height,dst->width,CV_32FC1);
//    ShowImg(dst);
    cvConvert(dst,mat);///turn picture to Mat
    Row = cvReshape(mat,&Row_Header,0,1); ///转成一列

    float* ptr=(float*)(Train_Mat->data.fl+i*Train_Mat->step/4);
    float* _ptr=(float*)Row->data.fl;

    for(int j=0;j<Train_Mat->cols;++j) ///将图片存入训练矩阵
    {
      *ptr = *_ptr;
      ++ptr;
      ++_ptr;
    }
  }
  return Train_Mat;
}
void PickPCA(int Sample_Num)
{
//  char tt[55];
//  strcpy(tt,ID_Student);
  CvMat* Sample = Load_Image_And_Training(Sample_Num,ID_Student,1);
  CvMat* Unkonw = Load_Image_And_Training(1,ID_Student,0);
  CvMat* avg = cvCreateMat(1,Sample->cols,CV_32FC1);
	CvMat* eigenvalues = cvCreateMat(1,min(Sample->rows,Sample->cols),CV_32FC1);
	CvMat* eigenvectors = cvCreateMat(min(Sample->rows,Sample->cols),Sample->cols,CV_32FC1);
	CvMat* result = cvCreateMat(Sample->rows,min(Sample->rows,Sample->cols),CV_32FC1);//主成分数目:min(Sample->rows,Sample->cols)
	CvMat* result2 = cvCreateMat(Unkonw->rows,min(Sample->rows,Sample->cols),CV_32FC1);
	
	cvCalcPCA( Sample,avg,eigenvalues,eigenvectors,CV_PCA_DATA_AS_ROW );
	cvProjectPCA( Sample,avg,eigenvectors,result );
	cvProjectPCA( Unkonw,avg,eigenvectors,result2 );
	
	float* dif = new float[result->rows];
	float* _dif = dif;
	float* t_free = dif;
	float* resptr1,*resptr2;
	float sum;
	for(int i=0;i<result->rows;++i)
  {
      sum = 0.0;
      resptr1=(float*)result->data.fl+i*result->step/4;
      resptr2=(float*)result2->data.fl;
      for(int j=0;j<result->cols;++j)
      {
        sum += (float)(*resptr1-*resptr2)*(*resptr1-*resptr2);
        resptr1++; resptr2++;
      }
    *dif = sum;
    printf("--%d %f\n",i+1,sum);
    dif++;
  }
  
  int dex=1;                           //样本命名是从1开始的
	float temp=*_dif;
	printf("besgin: %f\n",temp);
	for(int k=1;k<result->rows;k++)
	{
			_dif++;
			if(temp>*_dif)
			{
				printf("temp= %f _dif= %f\n",temp,*_dif);
				dex=k+1;            //样本命名是从1开始的
				temp=*_dif;
			}
	}
	printf("OK_OK_%d\n",dex);
	
	delete [] t_free;
}
int main()
{
//    CvMat* tes = Load_Image_And_Training(5,ID_Student);
    PickPCA(10);
    cvWaitKey(0);
    while(~scanf("%s",path_name))
    {
      cascade_name = "haarcascade_frontalface_alt2.xml";
      cascade = (CvHaarClassifierCascade*)cvLoad( cascade_name, 0, 0, 0 );
      storage = cvCreateMemStorage(0);
      cvNamedWindow( "result", 1 );
      IplImage* image = cvLoadImage( path_name, 1 );
//      IplImage* test =cvLoadImage(ID_Student,1);
//      ShowImg(test);
      if( image )
        {
            detect_and_draw( image );
//            cvWaitKey(0);
            cvReleaseImage( &image );
        }
        cvDestroyWindow("result");
    }
    return 0;
}
